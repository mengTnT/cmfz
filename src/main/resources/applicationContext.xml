<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			">
	<!-- 开启环境组件扫描	，扫描service层下的注解 -->	
	<context:component-scan base-package="com.baizhi.cmfz.service"></context:component-scan>

	<!-- 1.加载小配置文件，通过context标签完成 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 2.配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 3.由spring创建mybatis需要的对象 -->
	<!-- 添加了一个mybatis对spring支持的jar包；在这个jar包有一个类SqlSessionFacotryBean -->
	<!-- 这个类就是mybatis对spring支持的一个bean，创建sqlSession工厂对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 连接数据库的相关信息 -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 加载映射文件 -->
		<property name="mapperLocations">
			<list>
				<!-- 支持通配符的方式 -->
				<value>classpath:com/baizhi/cmfz/dao/*DaoMapper.xml</value>
				<!-- <value>classpath:com/baizhi/ssm/dao/AdminDaoMapper.xml</value> -->
			</list>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>dialect=mysql</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	
	<!-- 让spring帮我们创建dao层的接口的代理对象 -->
	<!-- 加载指定包下的所有接口，生成对应的代理对象 -->
	<!-- 生成的代理对象的名字是接口名首字母小写
		com.baizhi.ssm.dao.UserDao===>userDao
		com.baizhi.ssm.dao.BookDao===>bookDao
	-->
	<!-- 获取dao的代理对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.baizhi.cmfz.dao"></property>
	</bean>
	
	
	
	<!-- 4.配置spring的声明式事务处理 -->
		<!-- 4.1声明事务管理器 -->
		<!-- 4.2创建事务增强 ==》定义事务规则-->
		<!-- 4.3配置切入点 -->
		<!-- 4.4事务增强和切入点编织在一起 -->
		<!-- 声明式事务处理==》在service层做事务处理 -->
	<!-- 1.通过数据源声明事务管理器      bean标签-->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 2.由事务管理器创建事务增强 ====>就是一个增强处理，通过tx标签配置-->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- 配置事务规则 -->
		<!--<tx:attributes>
			&lt;!&ndash; name属性写的是service层中的方法名，这个属性值支持模糊匹配 &ndash;&gt;
			<tx:method name="get*" read-only="true"/>
			<tx:method name="set*" read-only="true"/>

			&lt;!&ndash; 除了get开头和set开头的方法，之外的所有方法，需要事务处理 &ndash;&gt;
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>-->
		<tx:attributes>
			<tx:method name="get*" isolation="READ_COMMITTED" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="set*" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>

	</tx:advice>
	
	<aop:config>
		<!-- 3.通过aop配置切入点==>配置在service层的所有方法 -->
		<aop:pointcut expression="execution(* com.baizhi.cmfz.service.*.*(..))" id="servicePoincut"/>
		
		<!-- 4.把切入点和增强编织在一起 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePoincut"/>
	</aop:config>

	<!--redis 配置-->

	<!--连接配置-->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--最大空闲数-->
		<property name="maxIdle" value="1"></property>
		<!--最大连接数-->
		<property name="maxTotal" value="100"></property>
		<!--最大等待时长-->
		<property name="maxWaitMillis" value="3000"></property>
		<!--使用时检查当前裂解是否阻塞，设置为true 显示异常信息-->
		<property name="blockWhenExhausted" value="true"></property>
		<!-- 检查当前连接是否有效 -->
		<property name="testOnBorrow" value="true"></property>
	</bean>
	<!--reids的连接配置-->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!--服务器IP 地址-->
		<property name="hostName" value="127.0.0.1"/>
		<!--端口号-->
		<property name="port" value="6379"/>
		<!--指定连接池配置-->
		<property name="poolConfig" ref="jedisPoolConfig"/>
	</bean>

	<!--redis的操作类  操作redis数据库的-->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<!--配置连接-->
		<property name="connectionFactory" ref="connectionFactory"></property>
		<!--key的序列化配置-->
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
		</property>
		<!--value的序列化配置，如果不配值，提示 对象not is String .....-->
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>
		</property>
	</bean>

	<!--redis 配置  end-->

<!--日志处理-->

	<bean id="myInterceptor" class="com.baizhi.cmfz.Interceptor.MyInterceptor"></bean>
	<aop:config proxy-target-class="true">

		<!--定义切入点-->
		<aop:pointcut expression="@annotation(com.baizhi.cmfz.Log.ServiceLog)" id="myPoint"/>
		<!--编织-->
		<aop:advisor advice-ref="myInterceptor" pointcut-ref="myPoint"/>
	</aop:config>

	<!--日志处理结束-->

<!--导入shiro配置-->
	<import resource="classpath:shiro-config.xml"/>
</beans>


